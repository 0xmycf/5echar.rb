# frozen_string_literal: true

require_relative 'autojson'

#  A basic dnd char.
#  The Character can be serialzed to json or pdf
class Char

  include JSONable

  attr_reader :name, :class_, :level, :subclass,
              :background, :spells, :feats, :to_pdf_path, :to_json_path

  @options = {}

  # the command line options
  def initialize(options)
    if options[:from_json]
      load_from_json options[:from_json]
    else
      init_char options
    end
  end

  private

  def init_char(options)
    # @type [String]
    @name = options[:name]
    # @type [String]
    @class_ = options[:class_]
    # @type [Integer]
    @level = options[:level]
    # @type [String]
    @sublclass = options[:sublclass]
    # @type [String]
    @background = options[:background]
    # @type [Array<String>]
    @spells = options[:spells]
    init_attrs(options)
    # @type [Array<String>]
    @feats = options[:feats]
    # @type [String]
    @to_pdf_path = options[:to_pdf]
    # @type [String]
    @to_json_path = options[:to_json]
  end

  def load_from_json(_file)
    puts "wip / not supported yet "
  end

  def init_attrs(options)
    if options[:roll_attributes]
      roll
    else
      @attributes = options[:attributes]
    end
  end

  def roll
    @attributes = Die.attributes
  end

end

# A simple die with sides and optional keep highest and lowest
class Die

  def initialize(sides, kh: 0)
    @sides = sides

    raise ArgumentError, 'sides must be greater than 0' if sides < 1
    raise ArgumentError, 'kh must be greater than 0' if kh.negative?

    @kh = kh
  end

  # @param n [Integer]
  # @return [Array<Integer>]
  def roll_n(n)
    n.times.map { roll }.sort.reverse.take(@kh)
  end

  # Returns the sum of n numbers generated by rolling the die m times.
  #
  # @param n [Integer] how many numbers should be generated
  # @param m [Integer] how many dice should be rolled for each number
  # Å“return [Array<Integer>]
  def sum_of(n, m)
    n.times.map { roll_n(m).sum }
  end

  # Returns 6 4d6kh3 attributes
  def self.attributes
    die = Die.new 6, kh: 3
    die.sum_of(6, 4)
  end

  def to_intermediary
    puts "foo"
  end

  private

  def roll
    rand(1..@sides)
  end

end
